apply plugin: 'release'

buildscript {
    repositories {
        mavenCentral()
        maven {
            url 'http://maven.tmatesoft.com/content/repositories/releases/'
        }
    }

    dependencies {
        classpath(
            [group: 'au.com.ish.gradle', name: 'release', version: project.releasePluginVersion]
        )
    }
}

allprojects {
    configurations.all {
        it.exclude group: 'log4j', module: 'log4j'
        it.exclude module: 'slf4j-log4j12'
        it.exclude group: 'commons-logging', module: 'commons-logging'
        it.exclude module: 'slf4j-simple'
    }

    release {
        failOnSnapshotDependencies = true
        scm = 'git'
//        username = project.scmUserName
//        password = project.scmPassword
    }

    group = 'com.github.phasebash.jackson'
    version = release.projectVersion

}

subprojects {
    apply plugin: 'base'
    apply plugin: 'maven-publish'

    apply plugin: 'groovy'
    tasks.withType(GroovyCompile) {
        sourceCompatibility = project.javaVersion
        targetCompatibility = project.javaVersion

        groovyOptions.encoding = 'UTF-8'
        groovyOptions.fork = true

        options.fork = true
        options.encoding = 'UTF-8'
    }

    apply plugin: 'codenarc'
    codenarc {
        configFile = file("${rootProject.projectDir}/config/codenarc/codenarc.groovy")
        toolVersion = project.codenarcToolVersion
    }

    apply plugin: 'jacoco'
    jacoco {
        toolVersion = project.jacocoToolVersion
    }
    jacocoTestReport {
        reports {
            xml.enabled true
            csv.enabled false
            html.enabled true
        }
    }
    test {
        jacoco {
            append = false
            destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
            classDumpFile = file("$buildDir/jacoco/classpathdumps")
        }
    }

    check.dependsOn jacocoTestReport

    dependencies {
        testCompile(
            [group: 'org.codehaus.groovy', name: 'groovy-all', version: project.groovyVersion, classifier: project.groovyClassifier],

            [group: 'org.hamcrest', name: 'hamcrest-core', version: project.hamcrestVersion],
            [group: 'org.hamcrest', name: 'hamcrest-library', version: project.hamcrestVersion],

            [group: 'org.slf4j', name: 'log4j-over-slf4j', version: project.slf4jVersion],
            [group: 'org.slf4j', name: 'jcl-over-slf4j', version: project.slf4jVersion],
            [group: 'ch.qos.logback', name: 'logback-classic', version: project.logbackVersion],
        )
        testCompile(group: 'org.gmock', name: 'gmock', version: project.gmockVersion) {
            exclude module: 'groovy-all'
        }
        testCompile(group: 'junit', name: 'junit', version: project.junitVersion) {
            exclude module: 'hamcrest-core'
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: groovydoc) {
        from javadoc.destinationDir
    }

    publish.dependsOn build

    repositories {
        mavenCentral()
    }

    publishing {
        publications {
            mainJar(MavenPublication) {
                from components.java

                artifact sourcesJar {
                    classifier "sources"
                }

                artifact javadocJar {
                    classifier "javadoc"
                }
            }
        }
        repositories {
            if (isSnapshot(project)) {
                maven {
                    name 'snapshots'
                    url 'https://oss.sonatype.org/content/repositories/snapshots/'
                    credentials {
                        username = project.sonatypeUsername
                        password = project.sonatypePassword
                    }
                }
            } else {
                maven {
                    name 'releases'
                    url 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
                    credentials {
                        username = project.sonatypeUsername
                        password = project.sonatypePassword
                    }
                }
            }
        }
    }

}

def isSnapshot(def project) {
    project.version.endsWith('-SNAPSHOT')
}

task wrapper(type: Wrapper) {
    gradleVersion = project.gradleVersion
}
